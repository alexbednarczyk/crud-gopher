basePath: /
definitions:
  common.HTTPError:
    properties:
      code:
        example: 500
        type: integer
      message:
        example: internal server error
        type: string
    type: object
  model.UserRequest:
    properties:
      display_name:
        example: Jonny
        type: string
      first_name:
        example: Jon
        type: string
      last_name:
        example: Doe
        type: string
    type: object
  model.UserResponse:
    properties:
      created_at:
        type: string
      display_name:
        type: string
      first_name:
        type: string
      guid:
        type: string
      last_name:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact: {}
  description: This is an example Golang API service.
  license:
    name: MIT
    url: https://github.com/alexbednarczyk/crud-gopher/blob/master/LICENSE
  termsOfService: http://swagger.io/terms/
  title: Golang API Service
  version: "1.0"
paths:
  /v0alpha/crud/users:
    get:
      description: fetch all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.HTTPError'
      summary: fetches all users from the database
      tags:
      - user crud
    post:
      consumes:
      - application/json
      description: creates user
      parameters:
      - description: User's data
        in: body
        name: UserRequest
        schema:
          $ref: '#/definitions/model.UserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.UserResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.HTTPError'
      summary: creates a database entry for the user
      tags:
      - user crud
  /v0alpha/crud/users/{user_id}:
    delete:
      consumes:
      - application/json
      description: delete a user
      parameters:
      - description: User GUID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204": {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.HTTPError'
      summary: delete a database entry for the user
      tags:
      - user crud
    get:
      consumes:
      - application/json
      description: fetch a user's data
      parameters:
      - description: User GUID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.HTTPError'
      summary: fetches a user from the database given the user's GUID
      tags:
      - user crud
    patch:
      consumes:
      - application/json
      description: update a user's database entry
      parameters:
      - description: User GUID
        in: path
        name: user_id
        required: true
        type: string
      - description: User's data
        in: body
        name: UserRequest
        schema:
          $ref: '#/definitions/model.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.HTTPError'
      summary: updates a database entry for the user
      tags:
      - user crud
    put:
      consumes:
      - application/json
      description: replace user
      parameters:
      - description: User GUID
        in: path
        name: user_id
        required: true
        type: string
      - description: User's data
        in: body
        name: UserRequest
        schema:
          $ref: '#/definitions/model.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.HTTPError'
      summary: replaces a database entry for the user
      tags:
      - user crud
  /v0alpha/examples/attribute:
    get:
      consumes:
      - application/json
      description: attribute
      parameters:
      - description: string enums
        enum:
        - A
        - B
        - C
        in: query
        name: enumstring
        type: string
      - description: int enums
        enum:
        - 1
        - 2
        - 3
        in: query
        name: enumint
        type: integer
      - description: int enums
        enum:
        - 1.1
        - 1.2
        - 1.3
        in: query
        name: enumnumber
        type: number
      - description: string valid
        in: query
        maxLength: 10
        minLength: 5
        name: string
        type: string
      - description: int valid
        in: query
        maximum: 10
        minimum: 1
        name: int
        type: integer
      - default: A
        description: string default
        in: query
        name: default
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: answer
          schema:
            type: string
        "400":
          description: ok
          schema:
            type: string
        "404":
          description: ok
          schema:
            type: string
        "500":
          description: ok
          schema:
            type: string
      summary: attribute example
      tags:
      - examples
  /v0alpha/examples/calc:
    get:
      consumes:
      - application/json
      description: plus
      parameters:
      - description: used for calc
        in: query
        name: val1
        required: true
        type: integer
      - description: used for calc
        in: query
        name: val2
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: answer
          schema:
            type: integer
        "400":
          description: ok
          schema:
            type: string
        "404":
          description: ok
          schema:
            type: string
        "500":
          description: ok
          schema:
            type: string
      summary: calc example
      tags:
      - examples
  /v0alpha/examples/groups/{group_id}/accounts/{account_id}:
    get:
      consumes:
      - application/json
      description: path params
      parameters:
      - description: Group ID
        in: path
        name: group_id
        required: true
        type: integer
      - description: Account ID
        in: path
        name: account_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: answer
          schema:
            type: string
        "400":
          description: ok
          schema:
            type: string
        "404":
          description: ok
          schema:
            type: string
        "500":
          description: ok
          schema:
            type: string
      summary: path params example
      tags:
      - examples
  /v0alpha/examples/header:
    get:
      consumes:
      - application/json
      description: custome header
      parameters:
      - description: Authentication header
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: answer
          schema:
            type: string
        "400":
          description: ok
          schema:
            type: string
        "404":
          description: ok
          schema:
            type: string
        "500":
          description: ok
          schema:
            type: string
      summary: custome header example
      tags:
      - examples
  /v0alpha/examples/securities:
    get:
      consumes:
      - application/json
      description: custome header
      parameters:
      - description: Authentication header
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: answer
          schema:
            type: string
        "400":
          description: ok
          schema:
            type: string
        "404":
          description: ok
          schema:
            type: string
        "500":
          description: ok
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      - OAuth2Implicit:
        - admin
        - write
      summary: custome header example
      tags:
      - examples
  /v0alpha/ping:
    get:
      description: display pong
      produces:
      - application/json
      responses:
        "200":
          description: pong
          schema:
            type: string
      summary: Get pong
swagger: "2.0"
