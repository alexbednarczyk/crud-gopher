{
	"info": {
		"_postman_id": "ada45d50-4058-49a1-9699-2aff595a82e1",
		"name": "v0alpha/crud/users",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "happy-path",
			"item": [
				{
					"name": "Get Initial User Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a7ef910-0461-4ec6-b5c4-6f6ead878bd2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.globals.unset(\"original_user_count\");",
									"pm.globals.set(\"original_user_count\", jsonData.length);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/v0alpha/crud/users",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v0alpha",
								"crud",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "36a06d44-d77c-4843-979e-8d0014da7fcf",
								"exec": [
									"function randomString(length, chars) {",
									"    var mask = '';",
									"    if (chars.indexOf('a') > -1) mask += 'abcdefghijklmnopqrstuvwxyz';",
									"    if (chars.indexOf('A') > -1) mask += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
									"    if (chars.indexOf('#') > -1) mask += '0123456789';",
									"    if (chars.indexOf('!') > -1) mask += '~!@#$%^&*()_+-=:;<>?,.';",
									"    var result = '';",
									"    for (var i = length; i > 0; --i) result += mask[Math.round(Math.random() * (mask.length - 1))];",
									"    return result;",
									"}",
									"",
									"pm.globals.set(\"generated_display_name\", randomString(Math.floor(Math.random() * 20), 'a#A!'));",
									"pm.globals.set(\"generated_first_name\", randomString(Math.floor(Math.random() * 20), 'a#A!'));",
									"pm.globals.set(\"generated_last_name\", randomString(Math.floor(Math.random() * 20), 'a#A!'));",
									"pm.globals.set(\"generated_fake_key\", randomString(Math.floor(Math.random() * 20), 'a#A!'));",
									"",
									"pm.globals.set(\"start_time\", new Date().getTime());",
									"",
									"console.log(pm.globals.get(\"generated_display_name\"));",
									"console.log(pm.globals.get(\"generated_first_name\"));",
									"console.log(pm.globals.get(\"generated_last_name\"));",
									"console.log(pm.globals.get(\"generated_fake_key\"));",
									"console.log(pm.globals.get(\"start_time\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9687733a-32e9-4d85-a247-0ec7054b31bc",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"Display Name\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (typeof pm.globals.get(\"generated_display_name\") !== 'undefined') {",
									"        pm.expect(jsonData.display_name).to.have.string(pm.globals.get(\"generated_display_name\"));",
									"    } else {",
									"        pm.expect(jsonData.display_name).to.eq('undefined');",
									"    }",
									"});",
									"pm.test(\"First Name\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (typeof pm.globals.get(\"generated_first_name\") !== 'undefined') {",
									"        pm.expect(jsonData.first_name).to.have.string(pm.globals.get(\"generated_first_name\"));",
									"    } else {",
									"        pm.expect(jsonData.first_name).to.eq('undefined');",
									"    }",
									"});",
									"pm.test(\"Last Name\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (typeof pm.globals.get(\"generated_last_name\") !== 'undefined') {",
									"        pm.expect(jsonData.last_name).to.have.string(pm.globals.get(\"generated_last_name\"));",
									"    } else {",
									"        pm.expect(jsonData.last_name).to.eq('undefined');",
									"    }",
									"});",
									"",
									"pm.test(\"Check CreatedAt and UpdatedAt Are Equal\", function () {",
									"    var jsonData = pm.response.json();",
									"    var created_at_date_time = new Date(jsonData.created_at).getTime();",
									"    var updated_at_date_time = new Date(jsonData.updated_at).getTime();",
									"    pm.expect(created_at_date_time).to.eql(updated_at_date_time);",
									"    pm.globals.set(\"created_user_created_at\", jsonData.created_at);",
									"    pm.globals.set(\"created_user_updated_at\", jsonData.updated_at);",
									"});",
									"",
									"pm.test(\"Check CreatedAt and UpdatedAt Are Within The Minute\", function () {",
									"    var jsonData = pm.response.json();",
									"    var created_at_date_time = new Date(jsonData.created_at).getTime();",
									"    var updated_at_date_time = new Date(jsonData.updated_at).getTime();",
									"    pm.expect(created_at_date_time/1000).to.be.eql(Math.floor(new Date(pm.globals.get(\"start_time\")).getTime()/1000));",
									"});",
									"",
									"pm.globals.set(\"created_user_guid\", jsonData.guid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"display_name\": \"{{generated_display_name}}\",\n\t\"first_name\": \"{{generated_first_name}}\",\n\t\"last_name\": \"{{generated_last_name}}\",\n\t\"fake_key\": \"{{generated_fake_key}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/v0alpha/crud/users",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v0alpha",
								"crud",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Created User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4162271e-1776-45ff-ad70-0fc86526a366",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"Display Name\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (typeof pm.globals.get(\"generated_display_name\") !== 'undefined') {",
									"        pm.expect(jsonData.display_name).to.have.string(pm.globals.get(\"generated_display_name\"));",
									"    } else {",
									"        pm.expect(jsonData.display_name).to.eq('undefined');",
									"    }",
									"});",
									"pm.test(\"First Name\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (typeof pm.globals.get(\"generated_first_name\") !== 'undefined') {",
									"        pm.expect(jsonData.first_name).to.have.string(pm.globals.get(\"generated_first_name\"));",
									"    } else {",
									"        pm.expect(jsonData.first_name).to.eq('undefined');",
									"    }",
									"});",
									"pm.test(\"Last Name\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (typeof pm.globals.get(\"generated_last_name\") !== 'undefined') {",
									"        pm.expect(jsonData.last_name).to.have.string(pm.globals.get(\"generated_last_name\"));",
									"    } else {",
									"        pm.expect(jsonData.last_name).to.eq('undefined');",
									"    }",
									"});",
									"",
									"pm.test(\"Check CreatedAt and UpdatedAt Are Equal\", function () {",
									"    var jsonData = pm.response.json();",
									"    var created_at_date_time = new Date(jsonData.created_at).getTime();",
									"    var updated_at_date_time = new Date(jsonData.updated_at).getTime();",
									"    pm.expect(created_at_date_time).to.eql(updated_at_date_time);",
									"    pm.globals.set(\"created_user_created_at\", jsonData.created_at);",
									"    pm.globals.set(\"created_user_updated_at\", jsonData.updated_at);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/v0alpha/crud/users/{{created_user_guid}}",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v0alpha",
								"crud",
								"users",
								"{{created_user_guid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Current Count Is Intial User Count +1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a7ef910-0461-4ec6-b5c4-6f6ead878bd2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"User Counter is Equal to Initial User Count +1\", function () {",
									"    pm.expect(jsonData.length).to.be.equal(pm.globals.get(\"original_user_count\")+1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/v0alpha/crud/users",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v0alpha",
								"crud",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "132e7824-6a46-43de-97d9-34128f47639a",
								"exec": [
									"function randomString(length, chars) {",
									"    var mask = '';",
									"    if (chars.indexOf('a') > -1) mask += 'abcdefghijklmnopqrstuvwxyz';",
									"    if (chars.indexOf('A') > -1) mask += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
									"    if (chars.indexOf('#') > -1) mask += '0123456789';",
									"    if (chars.indexOf('!') > -1) mask += '~!@#$%^&*()_+-=:;<>?,.';",
									"    var result = '';",
									"    for (var i = length; i > 0; --i) result += mask[Math.round(Math.random() * (mask.length - 1))];",
									"    return result;",
									"}",
									"",
									"pm.globals.set(\"generated_patch_display_name\", randomString(Math.floor(Math.random() * 20), 'a#A!'));",
									"pm.globals.set(\"generated_patch_first_name\", pm.globals.get(\"generated_first_name\"));",
									"pm.globals.set(\"generated_patch_last_name\", randomString(Math.floor(Math.random() * 20), 'a#A!'));",
									"pm.globals.set(\"generated_patch_fake_key\", randomString(Math.floor(Math.random() * 20), 'a#A!'));",
									"",
									"pm.globals.set(\"patch_start_time\", new Date().getTime());",
									"",
									"console.log(pm.globals.get(\"generated_patch_display_name\"));",
									"console.log(pm.globals.get(\"generated_patch_first_name\"));",
									"console.log(pm.globals.get(\"generated_patch_last_name\"));",
									"console.log(pm.globals.get(\"generated_patch_fake_key\"));",
									"console.log(pm.globals.get(\"patch_start_time\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e0c5e239-37c9-4c51-b6e0-dd925716d92a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"Display Name\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (typeof pm.globals.get(\"generated_patch_display_name\") !== 'undefined') {",
									"        pm.expect(jsonData.display_name).to.have.string(pm.globals.get(\"generated_patch_display_name\"));",
									"    } else {",
									"        pm.expect(jsonData.display_name).to.eq('undefined');",
									"    }",
									"});",
									"pm.test(\"First Name\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (typeof pm.globals.get(\"generated_patch_first_name\") !== 'undefined') {",
									"        pm.expect(jsonData.first_name).to.have.string(pm.globals.get(\"generated_patch_first_name\"));",
									"    } else {",
									"        pm.expect(jsonData.first_name).to.eq('undefined');",
									"    }",
									"});",
									"pm.test(\"Last Name\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (typeof pm.globals.get(\"generated_patch_last_name\") !== 'undefined') {",
									"        pm.expect(jsonData.last_name).to.have.string(pm.globals.get(\"generated_patch_last_name\"));",
									"    } else {",
									"        pm.expect(jsonData.last_name).to.eq('undefined');",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Check CreatedAt and UpdatedAt Are Not Equal\", function () {",
									"    var jsonData = pm.response.json();",
									"    var created_at_date_time = new Date(jsonData.created_at).getTime();",
									"    var updated_at_date_time = new Date(jsonData.updated_at).getTime();",
									"    pm.expect(created_at_date_time).to.not.eql(updated_at_date_time);",
									"    pm.globals.set(\"created_user_created_at\", jsonData.created_at);",
									"    pm.globals.set(\"created_user_updated_at\", jsonData.updated_at);",
									"});",
									"",
									"pm.test(\"Check UpdatedAt is after CreatedAt\", function () {",
									"    var jsonData = pm.response.json();",
									"    var created_at_date_time = new Date(jsonData.created_at).getTime();",
									"    var updated_at_date_time = new Date(jsonData.updated_at).getTime();",
									"    pm.expect(created_at_date_time/1000).to.be.below(Math.floor(new Date(pm.globals.get(\"patch_start_time\")).getTime()/1000));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"display_name\": \"{{generated_patch_display_name}}\",\n\t\"first_name\": \"{{generated_patch_first_name}}\",\n\t\"last_name\": \"{{generated_patch_last_name}}\",\n\t\"fake_key\": \"{{generated_patch_fake_key}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/v0alpha/crud/users/{{created_user_guid}}",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v0alpha",
								"crud",
								"users",
								"{{created_user_guid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Patched User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4162271e-1776-45ff-ad70-0fc86526a366",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"Display Name\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (typeof pm.globals.get(\"generated_patch_display_name\") !== 'undefined') {",
									"        pm.expect(jsonData.display_name).to.have.string(pm.globals.get(\"generated_patch_display_name\"));",
									"    } else {",
									"        pm.expect(jsonData.display_name).to.eq('undefined');",
									"    }",
									"});",
									"pm.test(\"First Name\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (typeof pm.globals.get(\"generated_patch_first_name\") !== 'undefined') {",
									"        pm.expect(jsonData.first_name).to.have.string(pm.globals.get(\"generated_patch_first_name\"));",
									"    } else {",
									"        pm.expect(jsonData.first_name).to.eq('undefined');",
									"    }",
									"});",
									"pm.test(\"Last Name\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (typeof pm.globals.get(\"generated_patch_last_name\") !== 'undefined') {",
									"        pm.expect(jsonData.last_name).to.have.string(pm.globals.get(\"generated_patch_last_name\"));",
									"    } else {",
									"        pm.expect(jsonData.last_name).to.eq('undefined');",
									"    }",
									"});",
									"",
									"pm.test(\"Check CreatedAt and UpdatedAt Are Not Equal\", function () {",
									"    var jsonData = pm.response.json();",
									"    var created_at_date_time = new Date(jsonData.created_at).getTime();",
									"    var updated_at_date_time = new Date(jsonData.updated_at).getTime();",
									"    pm.expect(created_at_date_time).to.not.eql(updated_at_date_time);",
									"    pm.globals.set(\"created_user_created_at\", jsonData.created_at);",
									"    pm.globals.set(\"created_user_updated_at\", jsonData.updated_at);",
									"});",
									"",
									"pm.test(\"Check UpdatedAt is after CreatedAt\", function () {",
									"    var jsonData = pm.response.json();",
									"    var created_at_date_time = new Date(jsonData.created_at).getTime();",
									"    var updated_at_date_time = new Date(jsonData.updated_at).getTime();",
									"    pm.expect(created_at_date_time/1000).to.be.below(Math.floor(new Date(pm.globals.get(\"patch_start_time\")).getTime()/1000));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/v0alpha/crud/users/{{created_user_guid}}",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v0alpha",
								"crud",
								"users",
								"{{created_user_guid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Current Count is Intial User Count +1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a7ef910-0461-4ec6-b5c4-6f6ead878bd2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"User Counter is Equal to Initial User Count +1\", function () {",
									"    pm.expect(jsonData.length).to.be.equal(pm.globals.get(\"original_user_count\")+1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/v0alpha/crud/users",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v0alpha",
								"crud",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e5d56aca-1eb1-4fab-88d8-db9b24f471a7",
								"exec": [
									"function randomString(length, chars) {",
									"    var mask = '';",
									"    if (chars.indexOf('a') > -1) mask += 'abcdefghijklmnopqrstuvwxyz';",
									"    if (chars.indexOf('A') > -1) mask += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';",
									"    if (chars.indexOf('#') > -1) mask += '0123456789';",
									"    if (chars.indexOf('!') > -1) mask += '~!@#$%^&*()_+-=:;<>?,.';",
									"    var result = '';",
									"    for (var i = length; i > 0; --i) result += mask[Math.round(Math.random() * (mask.length - 1))];",
									"    return result;",
									"}",
									"",
									"pm.globals.set(\"generated_put_display_name\", randomString(Math.floor(Math.random() * 20), 'a#A!'));",
									"pm.globals.set(\"generated_put_first_name\", randomString(Math.floor(Math.random() * 20), 'a#A!'));",
									"pm.globals.set(\"generated_put_last_name\", randomString(Math.floor(Math.random() * 20), 'a#A!'));",
									"pm.globals.set(\"generated_put_fake_key\", randomString(Math.floor(Math.random() * 20), 'a#A!'));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b2447132-fd51-40a5-b0ce-508bad7d1959",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"Display Name\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (typeof pm.globals.get(\"generated_put_display_name\") !== 'undefined') {",
									"        pm.expect(jsonData.display_name).to.have.string(pm.globals.get(\"generated_put_display_name\"));",
									"    } else {",
									"        pm.expect(jsonData.display_name).to.eq('undefined');",
									"    }",
									"});",
									"pm.test(\"First Name\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (typeof pm.globals.get(\"generated_put_first_name\") !== 'undefined') {",
									"        pm.expect(jsonData.first_name).to.have.string(pm.globals.get(\"generated_put_first_name\"));",
									"    } else {",
									"        pm.expect(jsonData.first_name).to.eq('undefined');",
									"    }",
									"});",
									"pm.test(\"Last Name\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (typeof pm.globals.get(\"generated_put_last_name\") !== 'undefined') {",
									"        pm.expect(jsonData.last_name).to.have.string(pm.globals.get(\"generated_put_last_name\"));",
									"    } else {",
									"        pm.expect(jsonData.last_name).to.eq('undefined');",
									"    }",
									"});",
									"",
									"pm.test(\"Check CreatedAt and UpdatedAt Are Equal\", function () {",
									"    var jsonData = pm.response.json();",
									"    var created_at_date_time = new Date(jsonData.created_at).getTime();",
									"    var updated_at_date_time = new Date(jsonData.updated_at).getTime();",
									"    pm.expect(created_at_date_time).to.eql(updated_at_date_time);",
									"    pm.globals.set(\"created_user_created_at\", jsonData.created_at);",
									"    pm.globals.set(\"created_user_updated_at\", jsonData.updated_at);",
									"});",
									"",
									"pm.test(\"Check CreatedAt and UpdatedAt Are After Start Time\", function () {",
									"    var jsonData = pm.response.json();",
									"    var created_at_date_time = new Date(jsonData.created_at).getTime();",
									"    var updated_at_date_time = new Date(jsonData.updated_at).getTime();",
									"    pm.expect(created_at_date_time/1000).to.be.above(Math.floor(new Date(pm.globals.get(\"start_time\")).getTime()/1000));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"display_name\": \"{{generated_put_display_name}}\",\n\t\"first_name\": \"{{generated_put_first_name}}\",\n\t\"last_name\": \"{{generated_put_last_name}}\",\n\t\"fake_key\": \"{{generated_put_fake_key}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/v0alpha/crud/users/{{created_user_guid}}",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v0alpha",
								"crud",
								"users",
								"{{created_user_guid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4162271e-1776-45ff-ad70-0fc86526a366",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"Display Name\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (typeof pm.globals.get(\"generated_put_display_name\") !== 'undefined') {",
									"        pm.expect(jsonData.display_name).to.have.string(pm.globals.get(\"generated_put_display_name\"));",
									"    } else {",
									"        pm.expect(jsonData.display_name).to.eq('undefined');",
									"    }",
									"});",
									"pm.test(\"First Name\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (typeof pm.globals.get(\"generated_put_first_name\") !== 'undefined') {",
									"        pm.expect(jsonData.first_name).to.have.string(pm.globals.get(\"generated_put_first_name\"));",
									"    } else {",
									"        pm.expect(jsonData.first_name).to.eq('undefined');",
									"    }",
									"});",
									"pm.test(\"Last Name\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (typeof pm.globals.get(\"generated_put_last_name\") !== 'undefined') {",
									"        pm.expect(jsonData.last_name).to.have.string(pm.globals.get(\"generated_put_last_name\"));",
									"    } else {",
									"        pm.expect(jsonData.last_name).to.eq('undefined');",
									"    }",
									"});",
									"",
									"pm.test(\"Check CreatedAt and UpdatedAt Are Equal\", function () {",
									"    var jsonData = pm.response.json();",
									"    var created_at_date_time = new Date(jsonData.created_at).getTime();",
									"    var updated_at_date_time = new Date(jsonData.updated_at).getTime();",
									"    pm.expect(created_at_date_time).to.eql(updated_at_date_time);",
									"    pm.globals.set(\"created_user_created_at\", jsonData.created_at);",
									"    pm.globals.set(\"created_user_updated_at\", jsonData.updated_at);",
									"});",
									"",
									"pm.test(\"Check CreatedAt and UpdatedAt Are After Start Time\", function () {",
									"    var jsonData = pm.response.json();",
									"    var created_at_date_time = new Date(jsonData.created_at).getTime();",
									"    var updated_at_date_time = new Date(jsonData.updated_at).getTime();",
									"    pm.expect(created_at_date_time/1000).to.be.above(Math.floor(new Date(pm.globals.get(\"start_time\")).getTime()/1000));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/v0alpha/crud/users/{{created_user_guid}}",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v0alpha",
								"crud",
								"users",
								"{{created_user_guid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Created User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d42c843e-f4da-4bb2-92ad-6c0d7c2a4111",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8080/v0alpha/crud/users/{{created_user_guid}}",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v0alpha",
								"crud",
								"users",
								"{{created_user_guid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Final User Count Equal Initial User Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a7ef910-0461-4ec6-b5c4-6f6ead878bd2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"User Counter is Equal to Initial User Count\", function () {",
									"    pm.expect(jsonData.length).to.be.equal(pm.globals.get(\"original_user_count\"));",
									"});",
									"",
									"pm.test(\"User GUID is not found\", function() {",
									"    pm.expect(searchForGUID(pm.globals.get(\"created_user_guid\"),jsonData)).to.be.false;",
									"});",
									"",
									"function searchForGUID(guid, respArray){",
									"    for (var i=0; i < respArray.length; i++) {",
									"        if (respArray[i].guid === guid) {",
									"            return true;",
									"        }",
									"    }",
									"    return false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/v0alpha/crud/users",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v0alpha",
								"crud",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail To Get Deleted User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8391a59f-3cb2-4e90-9100-93df4d6e6494",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.globals.unset(\"original_user_count\");",
									"pm.globals.unset(\"created_user_guid\");",
									"pm.globals.unset(\"created_user_created_at\");",
									"pm.globals.unset(\"created_user_updated_at\");",
									"pm.globals.unset(\"generated_display_name\");",
									"pm.globals.unset(\"generated_first_name\");",
									"pm.globals.unset(\"generated_last_name\");",
									"pm.globals.unset(\"generated_fake_key\");",
									"pm.globals.unset(\"start_time\");",
									"pm.globals.unset(\"generated_patch_display_name\");",
									"pm.globals.unset(\"generated_patch_first_name\");",
									"pm.globals.unset(\"generated_patch_last_name\");",
									"pm.globals.unset(\"generated_patch_fake_key\");",
									"pm.globals.unset(\"patch_start_time\");",
									"pm.globals.unset(\"generated_put_display_name\");",
									"pm.globals.unset(\"generated_put_first_name\");",
									"pm.globals.unset(\"generated_put_last_name\");",
									"pm.globals.unset(\"generated_put_fake_key\");",
									"pm.globals.unset(\"put_start_time\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/v0alpha/crud/users/{{created_user_guid}}",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"v0alpha",
								"crud",
								"users",
								"{{created_user_guid}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}